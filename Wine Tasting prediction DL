#importing the libraries
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
#reading the wine data
white = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep =';')
red = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", sep =';')

#First rows of 'red'
red.head()
#last row of 'white'
white.tail()
#sampling red
red.sample(5)
#describe 'white'
white.describe()
#null values in red
pd.isnull(red)

#Distribution of Alcohol
fig,ax=plt.subplots(1,2)
ax[0].hist(red.alcohol,10,facecolor='red',ec="black", alpha=0.5,label="Red Wine")
ax[1].hist(white.alcohol, 10, facecolor='white', ec="black",lw=0.5,alpha=0.5,label="White Wine")
fig.subplots_adjust(left=0,right=1,bottom=0,top=0.5,hspace=0.05,wspace=1)
ax[0].set_ylim([0,1000])
ax[0].set_xlabel("Alcohol in % Vol")
ax[0].set_ylabel("Frequency")
ax[1].set_ylim([0,1000])
ax[1].set_xlabel("Alcohol in % Vol")
ax[1].set_ylabel("Frequency")
fig.suptitle("Distribution of Alcohol in % Vol")
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

white = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv", sep =';')
red = pd.read_csv("http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", sep =';')

#Adding a column 'type' to red with price one
red['type']=1
#Adding a column 'type' to white with price zero
white['type']=0
#Appending white and red
wines = pd.concat([red, white], ignore_index=True)

# Importing 'train_test_split' from 'sklearn.model_selection'
from sklearn.model_selection import train_test_split

X = wines.iloc[:, 0:11]
Y = np.ravel(wines['type'])

# Splitting the dataset for training and validating
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.34, random_state=45)

# STRUCTURING THE NETWORK
# Importing Sequential and Dense model from Keras
from keras.models import Sequential
from keras.layers import Dense

# Initializing the constructor
model = Sequential()

# Adding an input layer
model.add(Dense(12, activation="relu", input_shape=(11,)))

# Adding one hidden layer
model.add(Dense(9, activation='relu'))

# Adding the output layer
model.add(Dense(1, activation='sigmoid'))

# Model output shape
print(model.output_shape)

# Model summary
model.summary()

# Model config
print(model.get_config())

# List of all weight tensors
print(model.get_weights())

# Compiling the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

#Training model
model.fit(X_train, Y_train, epochs=3, batch_size=1,verbose=1)
#Predicting the value
Y_pred=model.predict(X_test)
print(Y_pred)
